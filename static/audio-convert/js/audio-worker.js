const AudioWorker=(()=>{function AudioWorker(){}const quickCheckIfMp3=stream=>{for(let i=0;i<stream.byteLength;i++){if(mp3Parser.readFrame(stream,i,!1))return!0}return!1},findFirstFrame=(stream,mp3Info)=>{for(let i=0;i<stream.byteLength;i++){const frame=mp3Parser.readFrame(stream,i,!0);if(frame)return mp3Info.sampleLength=frame._section.sampleLength,mp3Info.samplingRate=frame.header.samplingRate,mp3Info.bitrate=frame.header.bitrate,mp3Info.numChannels="11"==frame.header.channelModeBits?1:2,mp3Info.isProtected=!frame.header.isProtected,mp3Info.frames.push(frame._section.offset),frame._section.nextFrameIndex-1}},parseStream=(_stream,mp3Info)=>{mp3Info.frames=[];const stream=new DataView(_stream);if(!quickCheckIfMp3(stream))throw new Error("not mp3");const offset=findFirstFrame(stream,mp3Info);try{for(let i=offset;i<=stream.byteLength;i++){const frame=mp3Parser.readFrame(stream,i,!0);frame&&(mp3Info.frames.push(frame._section.offset),i=frame._section.nextFrameIndex-1)}}catch(err){}if(!mp3Info.frames.length)throw new Error("not mp3");mp3Info.samplesRatio=mp3Info.frames.length*mp3Info.sampleLength,mp3Info.duration=mp3Info.frames.length*mp3Info.sampleLength/mp3Info.samplingRate},processStream=(streamData,mp3Info)=>new Promise((resolve,reject)=>{try{parseStream(streamData,mp3Info)}catch(err){return reject({id:406,error:"not mp3",type:"error"})}resolve(new Uint8Array(streamData))}),onMessage=event=>{switch(event.data.type){case"readFile":const fileReader=new FileReader;fileReader.onload=evt=>{const mp3Info={};processStream(evt.target.result,mp3Info).then(result=>{const _mp3Info=Object.assign({},{samplingRate:mp3Info.samplingRate,numChannels:mp3Info.numChannels,sampleLength:mp3Info.sampleLength,samplesRatio:mp3Info.samplesRatio,bitrate:mp3Info.bitrate,segments:Math.ceil(mp3Info.frames.length/256)});self.postMessage({type:"processSuccess",mp3Info:_mp3Info});for(let frameOffset=0,bufferIndex=0;frameOffset<mp3Info.frames.length;frameOffset+=256,bufferIndex++){const intervalFrom=mp3Info.frames[frameOffset],intervalTo=mp3Info.frames[frameOffset+256]||mp3Info.frames[mp3Info.frames.length-1],buffer=result.buffer.slice(intervalFrom,intervalTo);self.postMessage({type:"filePart",buffer:buffer},[buffer])}self.postMessage({type:"processComplete",mp3Info:_mp3Info}),self.destroy()}).catch(error=>{self.postMessage({type:"processError",error:error}),self.destroy()})},fileReader.onerror=evt=>{self.postMessage({type:"fileOpenError",error:evt.target.error}),self.destroy()},fileReader.readAsArrayBuffer(event.data.file)}},destroy=()=>{setTimeout(()=>{self.close()})},updateParserLib=()=>{mp3ParserLib.bitrateMap["00"]={"01":{"0000":"free","0001":8,"0010":16,"0011":24,"0100":32,"0101":40,"0110":48,"0111":56,1e3:64,1001:80,1010:96,1011:112,1100:128,1101:144,1110:160,1111:"bad"},10:{"0000":"free","0001":8,"0010":16,"0011":24,"0100":32,"0101":40,"0110":48,"0111":56,1e3:64,1001:80,1010:96,1011:112,1100:128,1101:144,1110:160,1111:"bad"},11:{"0000":"free","0001":32,"0010":48,"0011":56,"0100":64,"0101":80,"0110":96,"0111":112,1e3:128,1001:144,1010:160,1011:176,1100:192,1101:224,1110:256,1111:"bad"}},mp3ParserLib.sampleLengthMap["00"]={"01":576,10:1152,11:384}};return AudioWorker.prototype.toString=(params={})=>`importScripts('${params.libUrl}');  \nself.onmessage = ${onMessage}; \nself.params = ${JSON.stringify(params)}; \nself.quickCheckIfMp3=${quickCheckIfMp3};\nself.findFirstFrame=${findFirstFrame};\nself.processStream=${processStream};\nself.parseStream=${parseStream};\nself.updateParserLib=${updateParserLib};\nself.destroy=${destroy};\nself.updateParserLib();\n`,AudioWorker.getInstance=params=>(new AudioWorker).toString(params),AudioWorker})();